name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check --diff .
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing --tb=short --maxfail=10
      continue-on-error: true
    
    - name: Run tests with minimal requirements
      run: |
        python -m pytest tests/test_baseline_models.py::TestBaselineModels::test_init -v
        python -m pytest tests/test_ml_models.py::TestMLModels::test_init -v
        python -m pytest tests/test_evaluation_metrics.py::TestEvaluationMetrics::test_init -v
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        python -m pytest tests/ -m integration -v
    
    - name: Test model training
      run: |
        python -c "
        from src.models.ml_models import MLModels
        from src.data.preprocessor import DataPreprocessor
        import pandas as pd
        import numpy as np
        
        # Generate test data
        np.random.seed(42)
        n_samples = 100
        data = pd.DataFrame({
            'datetime': pd.date_range('2023-01-01', periods=n_samples, freq='H'),
            'price': 50 + 20 * np.sin(np.arange(n_samples) * 2 * np.pi / 24) + np.random.randn(n_samples) * 5
        })
        data.set_index('datetime', inplace=True)
        
        # Test preprocessing
        preprocessor = DataPreprocessor()
        preprocessor.price_data = data
        features = preprocessor.engineer_features()
        
        # Test model training
        X = features.drop('price', axis=1)
        y = features['price']
        split_idx = int(0.8 * len(X))
        X_train, X_test = X.iloc[:split_idx], X.iloc[split_idx:]
        y_train, y_test = y.iloc[:split_idx], y.iloc[split_idx:]
        
        ml_models = MLModels()
        ml_models.train_all(X_train, y_train)
        predictions = ml_models.predict_all(X_test)
        results = ml_models.evaluate_all(y_test, predictions)
        
        print('Integration test passed!')
        print(f'Results shape: {results.shape}')
        "

  build:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build package
      run: |
        python setup.py sdist bdist_wheel
    
    - name: Check package
      run: |
        pip install twine
        twine check dist/*
    
    - name: Upload to PyPI (if tagged)
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Security scan with safety
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
